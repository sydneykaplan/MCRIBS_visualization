.\" Automatically generated by Pod::Man version 1.02
.\" Mon Aug 29 19:37:35 2005
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` `
.    ds C' '
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
.    .
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "MNI::NumericUtilities 3"
.TH MNI::NumericUtilities 3 "version 0.07" "1997-10-03" "MNI Perl Library"
.UC
.SH "NAME"
\&\s-1MNI:\s0:NumericUtilities \- common trivial numeric operations
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&   use MNI::NumericUtilities qw(:all);
.Ve
.Vb 1
\&   in_range ($val, $lo, $hi);
.Ve
.Vb 1
\&   @abs_values = labs (@values);
.Ve
.Vb 1
\&   $rounded = round ($value [, $factor [, $dir]]);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fI\s-1MNI:\s0:NumericUtilities\fR provides a handful of common trivial numeric
operations.  About the only thing these routines have in common is 
a tendency to assume that all scalars are floating-point numbers.
.SH "SUBROUTINES"
.IX Header "SUBROUTINES"
.Ip "in_range (\s-1VAL\s0, \s-1LO\s0, \s-1HI\s0)" 4
.IX Item "in_range (VAL, LO, HI)"
Tests whether \s-1VAL\s0 is in the closed interval [\s-1LO\s0,HI].  Returns \-1 if \s-1VAL\s0
is less than \s-1LO\s0, +1 if \s-1VAL\s0 is greater than \s-1HI\s0, 0 otherwise.  Note the
\&\f(CW\*(C`cmp\*(C'\fR\-like backwards logic: a false value means that \s-1VAL\s0 is in range.
(I could be persuaded to consider this a bug and fix it, but you'd
better ask soon.)
.Ip "labs (\s-1VALS\s0)" 4
.IX Item "labs (VALS)"
Computes and returns the absolute values of a list of values.  \s-1VALS\s0
should be a simple list, not a reference to anything.  Returns the whole
list of absolute values in an array context, or just the first one in a
scalar context.  (Thus, \f(CW\*(C`labs ($val)\*(C'\fR is the same as \f(CW\*(C`abs ($val)\*(C'\fR,
but slower.)
.Sp
Note that Perl's built-in \f(CW\*(C`abs\*(C'\fR function only works on and returns
scalars.
.Ip "round (\s-1VAL\s0 [, \s-1FACTOR\s0 [, \s-1DIR\s0]])" 4
.IX Item "round (VAL [, FACTOR [, DIR]])"
Rounds \s-1VAL\s0 towards some multiple of \s-1FACTOR\s0 (which defaults to 1).  If \s-1DIR\s0
is \-1, it rounds down to the next lowest multiple of \s-1FACTOR\s0; if \s-1DIR\s0 is 0,
it rounds to the nearest multiple of \s-1FACTOR\s0, if \s-1DIR\s0 is +1, it rounds up to
the next highest multiple of \s-1FACTOR\s0.  The default is to round to the
nearest multiple of \s-1FACTOR\s0.
.Sp
For example:
.Sp
.Vb 5
\&   round (3.25)        == 3
\&   round (3.25, 5)     == 5
\&   round (3.25, 5, -1) == 0
\&   round (-1.2, 2, +1) == 0
\&   round (-1.2, 2)     == -2
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Greg Ward, <greg@bic.mni.mcgill.ca>.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1997 by Gregory P. Ward, McConnell Brain Imaging Centre,
Montreal Neurological Institute, McGill University.
.PP
This file is part of the \s-1MNI\s0 Perl Library.  It is free software, and may be
distributed under the same terms as Perl itself.
