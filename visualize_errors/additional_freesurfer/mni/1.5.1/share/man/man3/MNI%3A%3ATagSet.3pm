.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MNI::TagSet 3"
.TH MNI::TagSet 3 "2015-06-16" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MNI::TagSet \- module for accessing MNI tag files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use MNI::TagSet;
\&
\&  $in = MNI::TagSet\->open( "existing.tag" );
\&  $out = MNI::TagSet\->new( filename => "new.tag" );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SH "METHODS"
.IX Header "METHODS"
.IP "MNI::TagSet::open( filename [, comments] )" 4
.IX Item "MNI::TagSet::open( filename [, comments] )"
Constructor that reads an existing tag file.  The tag file suffix
(.tag) is appended to the filename if necessary.  Croaks if the file
does not exist, or is not a recognizable tag file.
.Sp
If the second optional parameter \fIcomments\fR appears, it is
appended to any existing comments in the file.  \fIcomments\fR may
be a string or a reference to an array of strings.
.IP "MNI::TagSet::copy( filename [, comments] )" 4
.IX Item "MNI::TagSet::copy( filename [, comments] )"
Copy constructor; must be invoked using a valid MNI::TagSet reference.
Must give a new filename for the copy.
.Sp
If the second optional parameter \fIcomments\fR appears, it is
appended to any existing comments in the file.  \fIcomments\fR may
be a string or a reference to an array of strings.
.IP "MNI::TagSet::new( option => value ... )" 4
.IX Item "MNI::TagSet::new( option => value ... )"
Construct a new tag file.  Possible options: filename, num_volumes,
comment.
.IP "numberOfVolumes" 4
.IX Item "numberOfVolumes"
Returns the number of volumes.
.IP "numberOfTags" 4
.IX Item "numberOfTags"
Returns the number of tags.
.IP "add_comment( comment [, comment] )" 4
.IX Item "add_comment( comment [, comment] )"
Add comment(s) to the tag set.  Each comment appears on a line
by itself in the tag file.
.IP "\fIget_points()\fR" 4
.IX Item "get_points()"
Returns array of \f(CW\*(C`TagPoint\*(C'\fR references.
.IP "add_points( point [, point ...] )" 4
.IX Item "add_points( point [, point ...] )"
Add one or more \f(CW\*(C`TagPoint\*(C'\fRs to the \f(CW\*(C`TagSet\*(C'\fR.
The new points are appended to the set.
.IP "volume1" 4
.IX Item "volume1"
.PD 0
.IP "volume2" 4
.IX Item "volume2"
.PD
Returns all tag points in volume.
.IP "volume1( N [, val ] )" 4
.IX Item "volume1( N [, val ] )"
.PD 0
.IP "volume2( N [, val ] )" 4
.IX Item "volume2( N [, val ] )"
.PD
Returns the Nth tag point of the volume.  Index starts at zero.
.Sp
If ref to array of three coordinates is given as optional second
argument, the coordinates will be updated.
.IP "volume1( label [, val ] )" 4
.IX Item "volume1( label [, val ] )"
.PD 0
.IP "volume2( label [, val ] )" 4
.IX Item "volume2( label [, val ] )"
.PD
Get or set the tag point specified by tag label, otherwise identical
to second usage.
.IP "label( N )" 4
.IX Item "label( N )"
Get the label associated with Nth tag point.  Index starts at zero.
.IP "\fIall_labels()\fR" 4
.IX Item "all_labels()"
Return array of all labels in Tag file.
